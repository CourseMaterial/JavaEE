package be.rubus.security.workshop.oauth2;import com.github.scribejava.apis.GoogleApi20;import com.github.scribejava.core.builder.ServiceBuilder;import com.github.scribejava.core.oauth.OAuth20Service;import javax.servlet.*;import javax.servlet.annotation.WebFilter;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.io.IOException;import java.math.BigInteger;import java.security.SecureRandom;import java.util.logging.Logger;@WebFilter(urlPatterns = "/*")public class AuthenticationFilter implements Filter {    private static final Logger LOGGER = Logger.getLogger(AuthenticationFilter.class.getName());    private static final String PROTECTED_AREA = "/pages";    private final SecureRandom random = new SecureRandom();    private static OAuth20Service oauth20Service;    private String contextPath;    public void init(FilterConfig filterConfig) throws ServletException {        contextPath = filterConfig.getServletContext().getContextPath();    }    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {        HttpServletRequest req = (HttpServletRequest) request;        boolean proceed = true;        if (oauth20Service == null) {            defineOAuth20Service(req);        }        HttpSession session = req.getSession();        if (session.getAttribute(Constants.USER_TOKEN) == null) {            // No token yet, get AccessToken from OAuth2 provider?            String requestURI = req.getRequestURI();            if (requestURI.startsWith(req.getContextPath() + PROTECTED_AREA)) {                // User requests a page from the protected area                // Keep the original URL                session.setAttribute(Constants.ORIGINAL_URL, req.getRequestURL().toString());                //  create the URL of Google OAuth2 Server                String csrfToken = nextCSRFToken();                OAuth20Service service = getOAuthService();                String authorizationUrl = service.createAuthorizationUrlBuilder()                        .state(csrfToken)                        .build();                session.setAttribute(Constants.CSRF_TOKEN, csrfToken);                // Redirect to Google.                ((HttpServletResponse) response).sendRedirect(authorizationUrl);                proceed = false;            }        }        if (proceed) {            chain.doFilter(request, response);        }    }    private void defineOAuth20Service(HttpServletRequest request) {        String callbackURL = defineCallbackURL(request);        LOGGER.info("Callback URL is calculated as " + callbackURL);        oauth20Service = new ServiceBuilder(Constants.CLIENT_ID)                .apiSecret(Constants.SECRET_ID)                .defaultScope("email https://www.googleapis.com/auth/calendar.readonly")                .callback(callbackURL)                .build(GoogleApi20.instance());    }    private String defineCallbackURL(HttpServletRequest request) {        String requestURL = request.getRequestURL().toString();  // This is the full URL like http://localhost:8080/oauth2/index.xhtml        String requestURI = request.getRequestURI(); // This is the partial URL like /oauth2/index.xhtml        String callbackURLFirstPart = requestURL.substring(0, requestURL.length() - requestURI.length());        return callbackURLFirstPart + contextPath + Constants.CALLBACK_SERVLET_PATH;    }    public static OAuth20Service getOAuthService() {        return oauth20Service;    }    private String nextCSRFToken() {        return new BigInteger(130, random).toString(32);    }}